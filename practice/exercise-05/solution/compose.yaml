# Exercise 05 - SOLUTION

services:
  traefik:
    # Traefik image version 3.5
    image: traefik:v3.5

    # Exposed ports
    ports:
      - "8443:3443" # HTTPS (websecure entrypoint)
      # - "8080:3080" # HTTP (web entrypoint) - Commented cause non-secure
      # - "9000:8080" # Traefik Dashboard ()

    # (Bonus) Labels for Traefik service itself
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.dev.dojo.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=websecure" # Force websecure only
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=authelia-forward-auth@file" # Apply the middleware named `whoami-auth@docker` to the router
      - "traefik.http.routers.traefik.tls=true" # Enable TLS on router

    # Mounted volumes
    volumes:
      # Podman socket to monitor containers (comment if using docker)
      - /run/user/1000/podman/podman.sock:/var/run/docker.sock:ro
      # Docker socket to monitor containers (comment if using podman)
      # - /var/run/docker.sock:/var/run/docker.sock:ro
      # Traefik configuration
      - ./traefik.yaml:/etc/traefik/traefik.yaml:ro
      # Middlewares file for file provider
      - ./middlewares.yaml:/etc/traefik/file-providers/middlewares.yaml:ro
      # Mount Traefik TLS configuration file provider
      - ./tls.yaml:/etc/traefik/file-providers/tls.yaml:ro
      # Mount ./certs certificates to /certs inside container
      - ./certs:/certs:ro

  # Whoami service
  whoami:
    # Image as specified in requirements
    image: traefik/whoami:v1.11

    # Traefik labels for service discovery
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"

      # Router configuration
      - "traefik.http.routers.whoami.rule=Host(`whoami.dev.dojo.localhost`)"
      - "traefik.http.routers.whoami.entrypoints=websecure" # Force websecure only
      - "traefik.http.routers.whoami.service=whoami" # Note: Not mandatory
      - "traefik.http.routers.whoami.middlewares=whoami-rate-limiter@file,authelia-forward-auth@file" # Apply the middleware named `whoami-rate-limiter@file` to the router
      - "traefik.http.routers.whoami.tls=true" # Enable TLS on router

      # Service configuration (whoami runs on port 80 by default)
      - "traefik.http.services.whoami.loadbalancer.server.port=80" # Note: Not mandatory

  # OpenDraw service
  draw:
    # Image as specified in requirements (using latest instead of the long path)
    image: ghcr.io/thomaschampagne/open-draw:latest

    # Traefik labels for service discovery
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"

      # Router configuration
      - "traefik.http.routers.draw.rule=Host(`draw.dev.dojo.localhost`)"
      - "traefik.http.routers.draw.entrypoints=websecure" # Force websecure only
      - "traefik.http.routers.draw.service=draw" # Note: Not mandatory
      - "traefik.http.routers.draw.middlewares=authelia-forward-auth@file" # Apply the middleware named `whoami-auth@docker` to the router
      - "traefik.http.routers.draw.tls=true" # Enable TLS on router

      # Service configuration (draw runs on port 80)
      - "traefik.http.services.draw.loadbalancer.server.port=3000" # Note: Not mandatory

  # Keep Old OpenDraw service as backup
  basic-auth-draw:
    # Image as specified in requirements (using latest instead of the long path)
    image: ghcr.io/thomaschampagne/open-draw:latest

    # Traefik labels for service discovery
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"

        # Create inline middleware BasicAuth (user => dojo:dojo)
      - "traefik.http.middlewares.basic-auth-draw.basicauth.users=dojo:$$2y$$05$$SzmoZ53EBGjqccpkwkiZ4.hKJUEj7pKNVb43HQkg9eZsdvzCiuGsG"

      # Router configuration
      - "traefik.http.routers.basic-auth-draw.rule=Host(`basic-auth-draw.dev.dojo.localhost`)"
      - "traefik.http.routers.basic-auth-draw.entrypoints=websecure" # Force websecure only
      - "traefik.http.routers.basic-auth-draw.service=draw" # Note: Not mandatory
      - "traefik.http.routers.basic-auth-draw.middlewares=basic-auth-draw@docker" # Apply the middleware named `whoami-auth@docker` to the router
      - "traefik.http.routers.basic-auth-draw.tls=true" # Enable TLS on router

      # Service configuration (draw runs on port 80)
      - "traefik.http.services.draw.loadbalancer.server.port=3000" # Note: Not mandatory

  authelia:
    image: authelia/authelia:4.39.6
    container_name: authelia
    volumes:
      - ./authelia/config:/config
    environment:
      TZ: Europe/Paris
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authelia.rule=Host(`auth.dev.dojo.localhost`)"
      - "traefik.http.routers.authelia.entrypoints=websecure"
      - "traefik.http.routers.authelia.service=authelia"
      - "traefik.http.routers.authelia.tls=true"
      - "traefik.http.services.authelia.loadbalancer.server.port=9091"
